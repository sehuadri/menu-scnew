#!/bin/bash
clear

# --- Variabel Warna ---
NC='\033[0m'
BIWhite='\033[1;97m'
BIYellow='\033[1;93m'
BIPurple='\033[1;95m'
Lime='\e[38;5;155m'
RED='\033[0;31m'

# --- Variabel Global ---
# Variabel ini akan diisi oleh fungsi-fungsi di bawah
USERNAME=""
EXPIRE_INFO=""
MYIP=$(curl -sS ipv4.icanhazip.com) # Ambil IP sekali saja

# --- Fungsi-Fungsi ---

# Fungsi untuk memeriksa dan menginstal paket yang hilang
install_packages() {
    local packages_to_check=("jq" "bc" "vnstat")
    for pkg in "${packages_to_check[@]}"; do
        if ! command -v "$pkg" &> /dev/null; then
            echo -e " ${BIYellow}[INFO]${NC} Installing ${pkg}..."
            apt-get update > /dev/null 2>&1
            apt-get install -y "$pkg" > /dev/null 2>&1
        fi
    done
}

# Fungsi validasi izin yang lebih efisien dan andal
validate_permission_and_info() {
    local LICENSE_URL="https://raw.githubusercontent.com/sehuadri/project/main/ip"
    local TODAY_DATE=$(date +'%Y-%m-%d')
    
    # Cari baris di mana kolom ke-4 sama persis dengan MYIP
    local AUTHORIZED_ENTRY=$(curl -sS "$LICENSE_URL" | awk -v myip="$MYIP" '$4 == myip' | head -1)

    if [[ -z "$AUTHORIZED_ENTRY" ]]; then
        echo -e "${RED}Permission Denied (IP Not Registered)${NC}"
        echo -e "Akses Ditolak (IP Tidak Terdaftar)"
        read -n 1 -s -r -p "Press [ Enter ] to Exit"
        exit 1
    fi

    # Ekstrak username dan status expired dari baris yang ditemukan
    USERNAME=$(echo "$AUTHORIZED_ENTRY" | awk '{print $2}')
    local EXP_STATUS=$(echo "$AUTHORIZED_ENTRY" | awk '{print $3}')

    # Cek status izin dan atur info expired
    if [[ "$EXP_STATUS" == "lifetime" ]]; then
        echo -e "${Lime}Permission Accepted (Lifetime User)${NC}"
        EXPIRE_INFO="Lifetime (Unlimited Days) (Active)"
    else
        local exp_timestamp=$(date -d "$EXP_STATUS" +%s 2>/dev/null)
        local today_timestamp=$(date -d "$TODAY_DATE" +%s)
        
        if [[ $? -ne 0 || -z "$exp_timestamp" ]]; then
            EXPIRE_INFO="${RED}Invalid / Unknown Date${NC}"
            echo -e "${RED}Permission Denied (Invalid Date Format)${NC}"
            exit 1
        fi

        local days_left=$(((exp_timestamp - today_timestamp) / 86400))
        local expire_date_formatted=$(date -d "$EXP_STATUS" +"%d-%m-%Y")

        if (( days_left >= 0 )); then
            local status_text="${Lime}Active${NC}"
            [[ $days_left -eq 0 ]] && status_text="${BIYellow}Today Expire${NC}"
            echo -e "${Lime}Permission Accepted${NC}"
            EXPIRE_INFO="${BIYellow}${expire_date_formatted}${NC} ${BIWhite}(${days_left} Days Left)${NC} ${status_text}"
        else
            echo -e "${RED}Permission Denied (Expired)${NC}"
            EXPIRE_INFO="${BIYellow}${expire_date_formatted}${NC} ${BIWhite}(Expired)${NC} ${RED}Expired${NC}"
            read -n 1 -s -r -p "Press [ Enter ] to Exit"
            exit 1
        fi
    fi
}

# Fungsi untuk memeriksa status service
check_service() {
  [[ $(systemctl is-active "$1") == "active" ]] && echo -e "${Lime}ON${NC}" || echo -e "${RED}OFF${NC}"
}

# Fungsi untuk menghitung penggunaan CPU
calculate_cpu_load() {
    local stat1=($(head -n 1 /proc/stat))
    local idle1=${stat1[4]}
    local total1=$((${stat1[1]} + ${stat1[2]} + ${stat1[3]} + ${stat1[4]} + ${stat1[5]} + ${stat1[6]} + ${stat1[7]}))
    sleep 0.5
    local stat2=($(head -n 1 /proc/stat))
    local idle2=${stat2[4]}
    local total2=$((${stat2[1]} + ${stat2[2]} + ${stat2[3]} + ${stat2[4]} + ${stat2[5]} + ${stat2[6]} + ${stat2[7]}))
    
    local total_diff=$((total2 - total1))
    local idle_diff=$((idle2 - idle1))

    [[ "$total_diff" -eq 0 ]] && LOADCPU="0.0%" || LOADCPU=$(printf "%.1f%%" $(echo "100 * ($total_diff - $idle_diff) / $total_diff" | bc))
}

# --- Eksekusi Utama ---

# 1. Instalasi dan Validasi
install_packages
validate_permission_and_info
clear

# 2. Pengumpulan Data Sistem
calculate_cpu_load
DOMAIN=$(cat /etc/xray/domain 2>/dev/null || echo "unknown")
NSDOMAIN=$(cat /etc/xray/dns 2>/dev/null || echo "unknown")
ISP_DATA=$(curl -s "http://ip-api.com/json/?fields=country,city,isp")
ISP=$(echo "$ISP_DATA" | jq -r '.isp')
CITY=$(echo "$ISP_DATA" | jq -r '.city')
COUNTRY=$(echo "$ISP_DATA" | jq -r '.country')
MODEL=$(grep -w PRETTY_NAME /etc/os-release | sed 's/PRETTY_NAME=//g' | tr -d '"')
RAM_TOTAL=$(free -m | awk 'NR==2 {print $2}')
UPTIME=$(uptime -p | sed 's/up //')

# 3. Pengumpulan Data Service & User
STATUS_SSH=$(check_service ssh)
STATUS_WS=$(check_service ws)
STATUS_XRAY=$(check_service xray)
STATUS_NGINX=$(check_service nginx)
STATUS_DROPBEAR=$(check_service dropbear)
STATUS_HAPROXY=$(check_service haproxy)
STATUS_UDP=$(check_service udp-custom)
STATUS_NOOBZVPNS=$(check_service noobzvpns)

let VMS_USERS=$(grep -c '###' /etc/xray/config.json)/2
let VLS_USERS=$(grep -c '#&' /etc/xray/config.json)/2
let TRJ_USERS=$(grep -c '#!' /etc/xray/config.json)/2
let SS_USERS=$(grep -c '#@&' /etc/xray/config.json)

# 4. Pengumpulan Data Traffic (Metode JSON yang lebih andal)
VNSTAT_JSON=$(vnstat --json)
get_traffic() {
    local period=$1 # "today", "yesterday", "month"
    local rx=$(echo "$VNSTAT_JSON" | jq -r ".interfaces[0].traffic.$period.rx")
    local tx=$(echo "$VNSTAT_JSON" | jq -r ".interfaces[0].traffic.$period.tx")
    local total=$(echo "$VNSTAT_JSON" | jq -r ".interfaces[0].traffic.$period.total")
    # Konversi dari KiB/MiB/GiB ke format yang mudah dibaca
    rx_formatted=$(numfmt --to=iec --suffix=B --format="%.2f" "$((rx * 1024))")
    tx_formatted=$(numfmt --to=iec --suffix=B --format="%.2f" "$((tx * 1024))")
    total_formatted=$(numfmt --to=iec --suffix=B --format="%.2f" "$((total * 1024))")
    echo "$rx_formatted $tx_formatted $total_formatted"
}
read -r today_rx today_tx today_total <<< "$(get_traffic 'today')"
read -r yesterday_rx yesterday_tx yesterday_total <<< "$(get_traffic 'yesterday')"
read -r month_rx month_tx month_total <<< "$(get_traffic 'month')"


# 5. Tampilan Menu (Menggunakan cat <<EOF untuk kerapian)
cat << EOF
${BIWhite}┌─────────────────────────────────────────────────┐${NC}
${BIWhite} │${NC}               ${BIWhite}• VPS PANEL MENU •              ${BIWhite} │${NC}
${BIWhite}└─────────────────────────────────────────────────┘${NC}
${BIWhite}┌─────────────────────────────────────────────────┐${NC}
${BIWhite}│${NC} ❄️ ${BIWhite}OS            : $MODEL${NC}
${BIWhite}│${NC} ❄️ ${BIWhite}RAM           : $RAM_TOTAL MB${NC}
${BIWhite}│${NC} ❄️ ${BIWhite}DATE          : $(date +'%d-%m-%Y')${NC}
${BIWhite}│${NC} ❄️ ${BIWhite}UPTIME        : $UPTIME${NC}
${BIWhite}│${NC} ❄️ ${BIWhite}ISP           : $ISP${NC}
${BIWhite}│${NC} ❄️ ${BIWhite}City          : $CITY, $COUNTRY${NC}
${BIWhite}│${NC} ❄️ ${BIWhite}IP VPS        : $MYIP${NC}
${BIWhite}│${NC} ❄️ ${BIWhite}DOMAIN        : $DOMAIN${NC}
${BIWhite}│${NC} ❄️ ${BIWhite}NSDomain      : $NSDOMAIN${NC}
${BIWhite}└─────────────────────────────────────────────────┘${NC}
${BIPurple}Script ini telah dipasang virus Trojan${NC}
${BIPurple}Jika terdapat indikasi Pencurian Kode ${NC}
${BIWhite}┌─────────────────────────────────────────────────┐${NC}
${BIPurple} │ ${BIWhite}[ NGINX    : ${STATUS_NGINX} ${BIWhite}]  ${BIWhite}[ XRAY : ${STATUS_XRAY} ${BIWhite}] │${NC}
${BIPurple} │ ${BIWhite}[ DROPBEAR : ${STATUS_DROPBEAR} ${BIWhite}]  ${BIWhite}[ UDPC : ${STATUS_UDP} ${BIWhite}] │${NC}
${BIPurple} │ ${BIWhite}[ HAPROXY  : ${STATUS_HAPROXY} ${BIWhite}]                     │${NC}
${BIWhite}└─────────────────────────────────────────────────┘${NC}
${BIWhite}┌─────────────────────────────────────────────────┐${NC}
  ${BIWhite}[01] • SSHWS    [${STATUS_WS}]   [09] • Bot Tele  [Menu]${NC}
  ${BIWhite}[02] • VMESS    [${STATUS_XRAY}]   [10] • BOT Notif [Menu]${NC}
  ${BIWhite}[03] • VLESS    [${STATUS_XRAY}]   [11] • BCKP RSTR [Menu]${NC}
  ${BIWhite}[04] • TROJAN   [${STATUS_XRAY}]   [12] • Restart   [Menu]${NC}
  ${BIWhite}[05] • SHADOWSK [${STATUS_XRAY}]   [13] • RUNNING   [Menu]${NC}
  ${BIWhite}[06] • Noobzvpn [${STATUS_NOOBZVPNS}]   [14] • REboot    [Menu]${NC}
  ${BIWhite}[07] • WILDCARD [${STATUS_XRAY}]   [15] • UPDATE    [Menu]${NC}
  ${BIWhite}[08] • Banner   [${STATUS_XRAY}]   [16] • SETTING   [Menu]${NC}
${BIWhite}└─────────────────────────────────────────────────┘${NC}
${BIWhite}┌─────────────────────────────────────────────────┐${NC}
${BIWhite} ORDER NAME :${NC} ${BIYellow}$USERNAME${NC}
${BIWhite} Exp SCRIPT :${NC} $EXPIRE_INFO
${BIWhite}└─────────────────────────────────────────────────┘${NC}
${BIWhite}┌─────────────────────────────────────────────────┐${NC}
${BIWhite}  Traffic      Today       Yesterday       Month   ${NC}
${BIYellow} Download    ${today_tx}      ${yesterday_tx}      ${month_tx}   ${NC}
${BIYellow} Upload      ${today_rx}      ${yesterday_rx}      ${month_rx}   ${NC}
${BIWhite}  Total        ${today_total}      ${yesterday_total}      ${month_total}  ${NC}
${BIWhite}└─────────────────────────────────────────────────┘${NC}
EOF

read -p " Select menu : " opt
echo ""
case $opt in
    1) clear ; m-ssh ;;
    2) clear ; m-vmess ;;
    3) clear ; m-vless ;;
    4) clear ; m-trojan ;;
    5) clear ; m-shadowsocks ;;
    6) clear ; m-nob ;;
    7) clear ; wildcard_auto ;;
    8) clear ; nano /etc/banner-ssh.txt ; read -n 1 -s -r -p "Press [ Enter ] to back on menu" ; menu ;;
    9) clear ; m-bot ;;
    10) clear ; m-bot-notif ;;
    11) clear ; m-backup ;;
    12) clear ; restart ;;
    13) clear ; run ;;
    14) clear ; reboot ;;
    15) clear ; update ;;
    16) clear ; m-setting ;;
    0) clear ; menu ;;
    x) exit ;;
    *) echo "Invalid option" ; sleep 1 ; exit ;;
esac
