#!/bin/bash
clear
y='\033[1;33m'
BGX="\033[42m"
CYAN="\033[96m"
Putih="\033[97m"
RED='\033[0;31m'
NC='\033[0m'
green='\033[0;32m'
BIBlack='\033[1;90m'
BIGreen='\033[1;92m'
BIYellow='\033[1;93m'
BIBlue='\033[1;94m'
BIPurple='\033[1;95m'
BICyan='\033[1;96m'
BIWhite='\033[1;97m'
UWhite='\033[4;37m'
On_IPurple='\033[0;105m'
On_IRed='\033[0;101m'
IBlack='\033[0;90m'
IGreen='\033[0;92m'
IYellow='\033[0;93m'
IBlue='\033[0;94m'
IPurple='\033[0;95m'
ICyan='\033[0;96m'
IWhite='\033[0;97m'
GREENBO='\033[1;32m'
bgwhite='\e[40;97;1m'
bgred='\e[41;97;1m'
bggreen='\e[42;97;1m'
bgyellow='\e[43;97;1m'
bgmagenta='\e[45;97;1m'
bgblue='\e[46;97;1m'
bgblack='\e[47;30;1m'
Lime='\e[38;5;155m'
w='\033[97m'
ORANGE='\033[0;34m'

# --- Variabel Global ---
# Variabel ini akan diisi oleh fungsi-fungsi di bawah
USERNAME=""
EXPIRE_INFO=""
MYIP=$(curl -sS ipv4.icanhazip.com) # Ambil IP sekali saja

# --- Fungsi-Fungsi ---

# Fungsi untuk memeriksa dan menginstal paket yang hilang
install_packages() {
    local packages_to_check=("jq" "bc" "vnstat")
    for pkg in "${packages_to_check[@]}"; do
        if ! command -v "$pkg" &> /dev/null; then
            echo -e " ${BIYellow}[INFO]${NC} Installing ${pkg}..."
            apt-get update > /dev/null 2>&1
            apt-get install -y "$pkg" > /dev/null 2>&1
        fi
    done
}

# Fungsi validasi izin yang lebih efisien dan andal
validate_permission_and_info() {
    local LICENSE_URL="https://raw.githubusercontent.com/sehuadri/project/main/ip"
    local TODAY_DATE=$(date +'%Y-%m-%d')
    
    # Cari baris di mana kolom ke-4 sama persis dengan MYIP
    local AUTHORIZED_ENTRY=$(curl -sS "$LICENSE_URL" | awk -v myip="$MYIP" '$4 == myip' | head -1)

    if [[ -z "$AUTHORIZED_ENTRY" ]]; then
        echo -e "${RED}Permission Denied (IP Not Registered)${NC}"
        echo -e "Akses Ditolak (IP Tidak Terdaftar)"
        read -n 1 -s -r -p "Press [ Enter ] to Exit"
        exit 1
    fi

    # Ekstrak username dan status expired dari baris yang ditemukan
    USERNAME=$(echo "$AUTHORIZED_ENTRY" | awk '{print $2}')
    local EXP_STATUS=$(echo "$AUTHORIZED_ENTRY" | awk '{print $3}')

    # Cek status izin dan atur info expired
    if [[ "$EXP_STATUS" == "lifetime" ]]; then
        echo -e "${Lime}Permission Accepted (Lifetime User)${NC}"
        EXPIRE_INFO="Lifetime (Unlimited Days) (Active)"
    else
        local exp_timestamp=$(date -d "$EXP_STATUS" +%s 2>/dev/null)
        local today_timestamp=$(date -d "$TODAY_DATE" +%s)
        
        if [[ $? -ne 0 || -z "$exp_timestamp" ]]; then
            EXPIRE_INFO="${RED}Invalid / Unknown Date${NC}"
            echo -e "${RED}Permission Denied (Invalid Date Format)${NC}"
            exit 1
        fi

        local days_left=$(((exp_timestamp - today_timestamp) / 86400))
        local expire_date_formatted=$(date -d "$EXP_STATUS" +"%d-%m-%Y")

        if (( days_left >= 0 )); then
            local status_text="${Lime}Active${NC}"
            [[ $days_left -eq 0 ]] && status_text="${BIYellow}Today Expire${NC}"
            echo -e "${Lime}Permission Accepted${NC}"
            EXPIRE_INFO="${BIYellow}${expire_date_formatted}${NC} ${BIWhite}(${days_left} Days Left)${NC} ${status_text}"
        else
            echo -e "${RED}Permission Denied (Expired)${NC}"
            EXPIRE_INFO="${BIYellow}${expire_date_formatted}${NC} ${BIWhite}(Expired)${NC} ${RED}Expired${NC}"
            read -n 1 -s -r -p "Press [ Enter ] to Exit"
            exit 1
        fi
    fi
}

# Fungsi untuk memeriksa status service
check_service() {
  [[ $(systemctl is-active "$1") == "active" ]] && echo -e "${Lime}ON${NC}" || echo -e "${RED}OFF${NC}"
}

# Fungsi untuk menghitung penggunaan CPU
calculate_cpu_load() {
    local stat1=($(head -n 1 /proc/stat))
    local idle1=${stat1[4]}
    local total1=$((${stat1[1]} + ${stat1[2]} + ${stat1[3]} + ${stat1[4]} + ${stat1[5]} + ${stat1[6]} + ${stat1[7]}))
    sleep 0.5
    local stat2=($(head -n 1 /proc/stat))
    local idle2=${stat2[4]}
    local total2=$((${stat2[1]} + ${stat2[2]} + ${stat2[3]} + ${stat2[4]} + ${stat2[5]} + ${stat2[6]} + ${stat2[7]}))
    
    local total_diff=$((total2 - total1))
    local idle_diff=$((idle2 - idle1))

    [[ "$total_diff" -eq 0 ]] && LOADCPU="0.0%" || LOADCPU=$(printf "%.1f%%" $(echo "100 * ($total_diff - $idle_diff) / $total_diff" | bc))
}

IPVPS=$(curl -s ipv4.icanhazip.com)
domain=$(cat /etc/xray/domain 2>/dev/null || echo "unknown")
ns=$(cat /etc/xray/dns 2>/dev/null || echo "unknown")
responden=$(curl -s "http://ip-api.com/json/?fields=country,region,city,timezone,isp")
ISP=$(echo "$responden" | jq -r '.isp')
CITY=$(echo "$responden" | jq -r '.city')
COUNTRY=$(echo "$responden" | jq -r '.country')
TIMEZONE=$(date +'%H:%M:%S')
RAM=$(free -m | awk 'NR==2 {print $2}')
USAGERAM=$(free -m | awk 'NR==2 {print $3}')
MEMOFREE=$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')
MODEL=$(grep -w PRETTY_NAME /etc/os-release | sed 's/PRETTY_NAME=//g' | tr -d '"')
CORE=$(grep -c ^processor /proc/cpuinfo)
DATEVPS=$(date +'%d-%m-%Y')
uptime=$(uptime -p | cut -d " " -f 2-)
today=$(date +'%Y-%m-%d')

check_service() {
  local service_name=$1
  local service_status=$(systemctl is-active "$service_name")
  if [[ "$service_status" == "active" ]]; then
    echo "${Lime}ON${NC}"
  else
    echo "${RED}OFF${NC}"
  fi
}

status_ssh=$(check_service ssh)
status_ws=$(check_service ws)
status_xray=$(check_service xray)
status_nginx=$(check_service nginx)
status_dropbear=$(check_service dropbear)
status_haproxy=$(check_service haproxy)
status_udp=$(check_service udp-custom)
status_slow=$(check_service server-sldns)
status_noobzvpns=$(check_service noobzvpns)

ess="$(awk -F: '$3 >= 1000 && $1 != "nobody" {print $1}' /etc/passwd | wc -l)"
vms=$(grep -c '###' /etc/xray/config.json)
vls=$(grep -c '#&' /etc/xray/config.json)
trj=$(grep -c '#!' /etc/xray/config.json)
ss=$(grep -c '#@&' /etc/xray/config.json)
let ssx=ss/1
let vmsx=vms/2
let vlsx=vls/2
let trjx=trj/2
# Download
vnstat_profile=$(vnstat | sed -n '3p' | awk '{print $1}' | grep -o '[^:]*')
vnstat -i ${vnstat_profile} >/root/t1
bulan=$(date +%b)
today=$(vnstat -i ${vnstat_profile} | grep today | awk '{print $8}')
todayd=$(vnstat -i ${vnstat_profile} | grep today | awk '{print $8}')
today_v=$(vnstat -i ${vnstat_profile} | grep today | awk '{print $9}')
today_rx=$(vnstat -i ${vnstat_profile} | grep today | awk '{print $2}')
today_rxv=$(vnstat -i ${vnstat_profile} | grep today | awk '{print $3}')
today_tx=$(vnstat -i ${vnstat_profile} | grep today | awk '{print $5}')
today_txv=$(vnstat -i ${vnstat_profile} | grep today | awk '{print $6}')
if [ "$(grep -wc ${bulan} /root/t1)" != '0' ]; then
    bulan=$(date +%b)
    month=$(vnstat -i ${vnstat_profile} | grep "$bulan " | awk '{print $9}')
    month_v=$(vnstat -i ${vnstat_profile} | grep "$bulan " | awk '{print $10}')
    month_rx=$(vnstat -i ${vnstat_profile} | grep "$bulan " | awk '{print $3}')
    month_rxv=$(vnstat -i ${vnstat_profile} | grep "$bulan " | awk '{print $4}')
    month_tx=$(vnstat -i ${vnstat_profile} | grep "$bulan " | awk '{print $6}')
    month_txv=$(vnstat -i ${vnstat_profile} | grep "$bulan " | awk '{print $7}')
else
    bulan=$(date +%Y-%m)
    month=$(vnstat -i ${vnstat_profile} | grep "$bulan " | awk '{print $8}')
    month_v=$(vnstat -i ${vnstat_profile} | grep "$bulan " | awk '{print $9}')
    month_rx=$(vnstat -i ${vnstat_profile} | grep "$bulan " | awk '{print $2}')
    month_rxv=$(vnstat -i ${vnstat_profile} | grep "$bulan " | awk '{print $3}')
    month_tx=$(vnstat -i ${vnstat_profile} | grep "$bulan " | awk '{print $5}')
    month_txv=$(vnstat -i ${vnstat_profile} | grep "$bulan " | awk '{print $6}')
fi
if [ "$(grep -wc yesterday /root/t1)" != '0' ]; then
    yesterday=$(vnstat -i ${vnstat_profile} | grep yesterday | awk '{print $8}')
    yesterday_v=$(vnstat -i ${vnstat_profile} | grep yesterday | awk '{print $9}')
    yesterday_rx=$(vnstat -i ${vnstat_profile} | grep yesterday | awk '{print $2}')
    yesterday_rxv=$(vnstat -i ${vnstat_profile} | grep yesterday | awk '{print $3}')
    yesterday_tx=$(vnstat -i ${vnstat_profile} | grep yesterday | awk '{print $5}')
    yesterday_txv=$(vnstat -i ${vnstat_profile} | grep yesterday | awk '{print $6}')
else
    yesterday=NULL
    yesterday_v=NULL
    yesterday_rx=NULL
    yesterday_rxv=NULL
    yesterday_tx=NULL
    yesterday_txv=NULL
fi
install_packages
validate_permission_and_info
clear
calculate_cpu_load
echo -e "${BIWhite}┌─────────────────────────────────────────────────┐${NC}"
echo -e "${BIWhite} ${NC} ${COLBG1}               ${BIWhite}• VPS PANEL MENU •              ${NC} ${BIWhite} $NC"
echo -e "${BIWhite}└─────────────────────────────────────────────────┘${NC}"
echo -e "${BIWhite}┌─────────────────────────────────────────────────┐${NC}"
echo -e "${BIWhite}│$NC${BIWhite} ❄️ OS            ${BIWhite}: ${BIWhite}$MODEL${NC}"
echo -e "${BIWhite}│$NC${BIWhite} ❄️ RAM           ${BIWhite}: ${BIWhite}$RAM MB${NC}"
echo -e "${BIWhite}│$NC${BIWhite} ❄️ DATE          ${BIWhite}: ${BIWhite}$TIMEZONE${NC}"
echo -e "${BIWhite}│$NC${BIWhite} ❄️ UPTIME        ${BIWhite}: ${BIWhite}$uptime${NC}"
echo -e "${BIWhite}│$NC${BIWhite} ❄️ ISP           ${BIWhite}: ${BIWhite}$ISP${NC}"
echo -e "${BIWhite}│$NC${BIWhite} ❄️ City          ${BIWhite}: ${BIWhite}$CITY, $COUNTRY${NC}"
echo -e "${BIWhite}│$NC${BIWhite} ❄️ IP VPS        ${BIWhite}: ${BIWhite}$IPVPS${NC}"
echo -e "${BIWhite}│$NC${BIWhite} ❄️ DOMAIN        ${BIWhite}: ${BIWhite}$domain${NC}"
echo -e "${BIWhite}│$NC${BIWhite} ❄️ NSDomain      ${BIWhite}: ${BIWhite}$ns${NC}"
echo -e "${BIWhite}└─────────────────────────────────────────────────┘${NC}"
echo -e "${BIPurple}Script ini telah dipasang virus Trojan${NC}"
echo -e "${BIPurple}Jika terdapat indikasi Pencurian Kode ${NC}"
echo -e "${BIWhite}┌─────────────────────────────────────────────────┐${NC}"
echo -e "${BIPurple} $NC ${BIWhite}[ NGINX    : ${status_nginx} ${BIWhite}]  ${BIWhite}[ XRAY : ${status_xray} ${BIWhite}]$NC"
echo -e "${BIPurple} $NC ${BIWhite}[ DROPBEAR : ${status_dropbear} ${BIWhite}]  ${BIWhite}[ UDPC : ${status_udp} ${BIWhite}]$NC"
echo -e "${BIPurple} $NC ${BIWhite}[ HAPROXY  : ${status_haproxy} ${BIWhite}]$NC"
echo -e "${BIWhite}└─────────────────────────────────────────────────┘${NC}"
#echo -e "${BIWhite} SSH : ${NC}${BIYellow}$ess${NC} ${BIWhite}VMESS : ${NC}${BIYellow}$vmsx${NC} ${BIWhite}VLESS : ${NC}${BIYellow}$vlsx${NC} ${BIWhite}TROJAN : ${NC}${BIYellow}$trjx${NC} ${BIWhite}SHADOWSOCKS: ${NC}${BIYellow}$ssx${NC}"
echo -e "${BIWhite}┌─────────────────────────────────────────────────┐${NC}"
echo -e "  ${BIWhite}[${BIWhite}01${BIWhite}]${NC} ${BIWhite}• ${BIWhite}SSHWS    ${BIWhite}[${BIWhite}${status_ws}${BIWhite}]   ${BIWhite}[${BIWhite}09${BIWhite}]${NC} ${BIWhite}• ${BIWhite}Bot Tele  ${BIWhite}[${BIWhite}Menu${BIWhite}]  ${BIWhite} $NC"   
echo -e "  ${BIWhite}[${BIWhite}02${BIWhite}]${NC} ${BIWhite}• ${BIWhite}VMESS    ${BIWhite}[${BIWhite}${status_xray}${BIWhite}]   ${BIWhite}[${BIWhite}10${BIWhite}]${NC} ${BIWhite}• ${BIWhite}BOT Notif ${BIWhite}[${BIWhite}Menu${BIWhite}]  ${BIWhite} $NC"  
echo -e "  ${BIWhite}[${BIWhite}03${BIWhite}]${NC} ${BIWhite}• ${BIWhite}VLESS    ${BIWhite}[${BIWhite}${status_xray}${BIWhite}]   ${BIWhite}[${BIWhite}11${BIWhite}]${NC} ${BIWhite}• ${BIWhite}BCKP RSTR ${BIWhite}[${BIWhite}Menu${BIWhite}]  ${BIWhite} $NC"  
echo -e "  ${BIWhite}[${BIWhite}04${BIWhite}]${NC} ${BIWhite}• ${BIWhite}TROJAN   ${BIWhite}[${BIWhite}${status_xray}${BIWhite}]   ${BIWhite}[${BIWhite}12${BIWhite}]${NC} ${BIWhite}• ${BIWhite}restart   ${BIWhite}[${BIWhite}Menu${BIWhite}]  ${BIWhite} $NC"  
echo -e "  ${BIWhite}[${BIWhite}05${BIWhite}]${NC} ${BIWhite}• ${BIWhite}SHADOWSK ${BIWhite}[${BIWhite}${status_xray}${BIWhite}]   ${BIWhite}[${BIWhite}13${BIWhite}]${NC} ${BIWhite}• ${BIWhite}RUNNING   ${BIWhite}[${BIWhite}Menu${BIWhite}]  ${BIWhite} $NC"
echo -e "  ${BIWhite}[${BIWhite}06${BIWhite}]${NC} ${BIWhite}• ${BIWhite}Noobzvpn ${BIWhite}[${BIWhite}${status_noobzvpns}${BIWhite}]   ${BIWhite}[${BIWhite}14${BIWhite}]${NC} ${BIWhite}• ${BIWhite}REboot    ${BIWhite}[${BIWhite}Menu${BIWhite}]  ${BIWhite} $NC"
echo -e "  ${BIWhite}[${BIWhite}07${BIWhite}]${NC} ${BIWhite}• ${BIWhite}WILDCARD ${BIWhite}[${BIWhite}${status_xray}${BIWhite}]   ${BIWhite}[${BIWhite}15${BIWhite}]${NC} ${BIWhite}• ${BIWhite}UPDATE    ${BIWhite}[${BIWhite}Menu${BIWhite}]  ${BIWhite} $NC"
echo -e "  ${BIWhite}[${BIWhite}08${BIWhite}]${NC} ${BIWhite}• ${BIWhite}BAner    ${BIWhite}[${BIWhite}${status_xray}${BIWhite}]   ${BIWhite}[${BIWhite}16${BIWhite}]${NC} ${BIWhite}• ${BIWhite}SETTING   ${BIWhite}[${BIWhite}Menu${BIWhite}]  ${BIWhite} $NC"  
echo -e "${BIWhite}└─────────────────────────────────────────────────┘${NC}"
echo -e "$BIWhite┌─────────────────────────────────────────────────┐${NC}"
echo -e "${BIWhite} ORDER NAME :${NC} ${BIYellow}$username${NC}"
echo -e "${BIWhite} Exp SCRIPT :${NC} $EXPIRE_INFO"
echo -e "$BIWhite└─────────────────────────────────────────────────┘${NC}"
echo -e "$BIWhite┌─────────────────────────────────────────────────┐${NC}"
echo -e "$BIWhite ${BIWhite}Traffic${NC}      ${BIWhite}Today       Yesterday       Month   ${NC}"
echo -e "$BIWhite ${BIYellow}Download${NC}   ${BIYellow}$today_tx $today_txv     $yesterday_tx $yesterday_txv    $month_tx $month_txv   ${NC}"
echo -e "$BIWhite ${BIYellow}Upload${NC}     ${BIYellow}$today_rx $today_rxv     $yesterday_rx $yesterday_rxv    $month_rx $month_rxv   ${NC}"
echo -e "$BIWhite ${BIWhite}Total${NC}    ${BIWhite}  $todayd $today_v     $yesterday $yesterday_v    $month $month_v  ${NC} "
echo -e "$BIWhite└─────────────────────────────────────────────────┘${NC}"

read -p " Select menu : " opt
echo -e ""
case $opt in
1) clear ; m-ssh ;;
2) clear ; m-vmess ;;
3) clear ; m-vless ;;
4) clear ; m-trojan ;;
5) clear ; m-shadowsocks ;;
6) clear ; m-nob ;;
7) clear ; wildcard_auto ;;
8) clear ; nano /etc/banner-ssh.txt ; read -n 1 -s -r -p "Press [ Enter ] to back on menu" ; menu ;;
9) clear ; m-bot ;;
10) clear ; m-bot-notif ;;
11) clear ; m-backup ;;
12) clear ; restart ;;
13) clear ; run ;;
14) clear ; reboot ;;
15) clear ; update ;;
16) clear ; m-setting ;;
0) clear ; menu ;;
x) exit ;;
*) echo -e "" ; echo "Press any key to back exit" ; sleep 1 ; exit ;;
esac
